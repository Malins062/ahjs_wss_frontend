(()=>{"use strict";var e,n,t,r,s,i,o,a={621:(e,n,t)=>{t(920),t(915);const r=t.p+"images/avatar.png";class s{constructor(e){let n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.userName=e,this.isOwner=n}render(){const e=document.createElement("li");e.className="user_item",this.isOwner&&e.classList.add("active_user");const n=document.createElement("div");n.className="user";const t=document.createElement("div");t.className="user_image";const s=document.createElement("img");s.src=r;const i=document.createElement("div");i.className="user_name";const o=document.createElement("h5");return o.className="user__name",o.textContent=this.isOwner?"Вы":this.userName,s.alt=o.textContent,t.appendChild(s),i.appendChild(o),n.appendChild(t),n.appendChild(i),e.appendChild(n),e}}class i{constructor(e,n,t){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];this.userName=e,this.message=n,this.isOwner=r,this.date=t}render(){const e=document.createElement("li");e.className=this.isOwner?"outgoing_msg":"incoming_msg";const n=document.createElement("div");n.className="msg";const t=document.createElement("div");t.className="msg_header";const r=document.createElement("span");r.className="msg_date_time",r.textContent=this.date;const s=document.createElement("span");s.className="msg_user",s.textContent=`${this.userName}, `,t.appendChild(s),t.appendChild(r);const i=document.createElement("p");return i.className="msg_text",i.textContent=this.message,n.appendChild(t),n.appendChild(i),e.appendChild(n),e}}const o="hidden",a="is-invalid";class d{constructor(e,n){this.parentEl=e,this.urlWebSocket=n,this.ws=null}static get formChatHTML(){return'\n      <div class="messaging">\n        <div class="inbox_msg">\n          <div class="left_side">\n            <div class="heading_panel">\n              <div class="recent_heading">\n                <h4>Участники</h4>\n              </div>\n            </div>\n            <ul class="list-unstyled users_list" data-id="users"></ul>\n          </div>\n\n          <div class="right_side">\n            <div class="heading_panel">\n              <div class="recent_heading">\n                <h4>Сообщения</h4>\n              </div>\n            </div>\n            <div class="messages">\n              <ul class="msg_history list-unstyled" data-id="messages"></ul>\n              <div class="type_msg">\n                <form data-id="form-message">\n                  <input type="text" data-id="message" placeholder=\'Введите сообщение и нажмите "Enter"...\' />\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>    \n    '}static get loadingHTML(){return`\n      <div class="form-processing ${o}">\n        <div class="overlay" id="overlay"></div>\n        <div class="loading-process" id="loadingProcess"></div>\n      </div>\n    `}static get formErrorHTML(){return`\n      <div class="dialog-error ${o}">\n        <div class="overlay" id="overlay"></div>\n        <form class="form-ticket-delete row g-3">\n          <div class="col-12">\n            <div class="d-flex justify-content-center">\n              <h5 class="form-title">Ошибка</h5>\n            </div>\n            <p></p>\n          </div>\n          <div class="col-12 d-flex justify-content-end">\n            <button type="submit" value="submit" class="submit-buttom btn btn-primary ms-2">OK</button>\n          </div>\n        </form>\n      </div>\n      `}static get formLoginHTML(){return'\n      <div class="dialog-login" data-id="dialog-login">\n        <div class="overlay" id="overlay"></div>\n        <form class="form-login row g-3" data-id="form-login">\n          <div class="col-12 d-flex justify-content-center">\n            <h5 class="form-title">Выберите псевдоним</h5>\n          </div>\n          <div class="col-12">\n            <input type="text" class="form-control" data-id = "username" required placeholder="Введите Ваше имя">\n            <div class="invalid-feedback">\n              Заданное имя уже занято. Выберите другое имя.\n            </div>\n          </div>\n          <div class="col-12 d-flex justify-content-center">\n            <button type="submit" value="submit" class="submit-buttom btn btn-primary ms-2">Продолжить</button>\n          </div>\n        </form>\n      </div>\n    '}static idSelector(e){return`[data-id="${e}"]`}static get formLoginSelector(){return".form-login"}wsConnect(){this.ws?this.ws.close(3001):(this.ws=new WebSocket(this.urlWebSocket),this.wsOpen=this.wsOpen.bind(this),this.ws.addEventListener("open",this.wsOpen),this.wsClose=this.wsClose.bind(this),this.ws.addEventListener("close",(e=>this.wsClose(e))),this.wsMessage=this.wsMessage.bind(this),this.ws.addEventListener("message",(e=>this.wsMessage(e))),this.wsError=this.wsError.bind(this),this.ws.addEventListener("error",(e=>this.wsError(e))))}run(){this.bindToDOM(),this.wsConnect(),this.init()}bindToDOM(){this.parentEl.innerHTML="",this.parentEl.innerHTML+=d.loadingHTML,this.parentEl.innerHTML+=d.formErrorHTML,this.parentEl.innerHTML+=d.formLoginHTML,this.parentEl.innerHTML+=d.formChatHTML}init(){this.dialogLogin=this.parentEl.querySelector(d.idSelector("dialog-login")),this.ulUsers=this.parentEl.querySelector(d.idSelector("users")),this.ulMessages=this.parentEl.querySelector(d.idSelector("messages")),this.formMessage=this.parentEl.querySelector(d.idSelector("form-message")),this.inputUserName=this.parentEl.querySelector(d.idSelector("username")),this.onChangeUserName=this.onChangeUserName.bind(this),this.inputUserName.addEventListener("keydown",this.onChangeUserName);const e=this.dialogLogin.querySelector(d.idSelector("form-login"));this.onSubmitLogin=this.onSubmitLogin.bind(this),e.addEventListener("submit",(e=>this.onSubmitLogin(e))),this.onSendMessage=this.onSendMessage.bind(this),this.formMessage.addEventListener("submit",(e=>this.onSendMessage(e)))}wsOpen(){console.log(`Соединение установлено. URL: ${this.urlWebSocket}`)}wsClose(e){e.wasClean?(console.log("Соединение закрыто."),this.ws=null):console.log("Обрыв соединения!"),console.log(`Код: ${e.code}; причина: ${e.reason}`)}wsMessage(e){const n=JSON.parse(e.data);if(n.renderUsers&&(this.users=n.names,this.users.forEach((e=>{this.ulUsers.appendChild(new s(e).render())}))),n.nameIsFree){this.dialogLogin.classList.add(o);const e=new s(n.name,!0).render();this.ulUsers.appendChild(e)}else!1===n.nameIsFree&&this.inputUserName.classList.add(a);n.renderName?this.ulUsers.appendChild(new s(n.name).render()):(n.closeUser&&[...this.ulUsers.querySelectorAll("li")].forEach((e=>{e.querySelector(".user__name").textContent===n.name&&e.remove()})),n.renderOwnMessage&&this.ulMessages.appendChild(new i(n.name,n.message,n.date,!0).render()),n.renderMessage&&this.ulMessages.appendChild(new i(n.name,n.message,n.date).render()),n.renderMessages&&n.messages.forEach((e=>{this.ulMessages.appendChild(new i(e.name,e.message,e.date).render())})))}wsError(e){console.log(`${this} Ошибка: ${e.message}`)}onSubmitLogin(e){e.preventDefault();const n=this.inputUserName.value;this.ws.send(JSON.stringify({userName:n,chooseUserName:!0}))}onSendMessage(e){e.preventDefault();const n=this.formMessage.querySelector(d.idSelector("message")).value;this.ws.send(JSON.stringify({chatMessage:!0,messageText:n})),e.currentTarget.reset()}onChangeUserName(){this.inputUserName.classList.contains(a)&&this.inputUserName.classList.remove(a)}}new d(document.querySelector("#widget-container"),"wss://sse-wss-chat.onrender.com//ws").run()},783:(e,n,t)=>{var r=t(618),s=Object.create(null),i="undefined"==typeof document,o=Array.prototype.forEach;function a(){}function d(e,n){if(!n){if(!e.href)return;n=e.href.split("?")[0]}if(l(n)&&!1!==e.isLoaded&&n&&n.indexOf(".css")>-1){e.visited=!0;var t=e.cloneNode();t.isLoaded=!1,t.addEventListener("load",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.addEventListener("error",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.href="".concat(n,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t)}}function c(){var e=document.querySelectorAll("link");o.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,n){if(i)return console.log("no window.document found, will not HMR CSS"),a;var t,u,h,p=function(e){var n=s[e];if(!n){if(document.currentScript)n=document.currentScript.src;else{var t=document.getElementsByTagName("script"),i=t[t.length-1];i&&(n=i.src)}s[e]=n}return function(e){if(!n)return null;var t=n.split(/([^\\/]+)\.js$/),s=t&&t[1];return s&&e?e.split(",").map((function(e){var t=new RegExp("".concat(s,"\\.js$"),"g");return r(n.replace(t,"".concat(e.replace(/{fileName}/g,s),".css")))})):[n.replace(".js",".css")]}}(e);return t=function(){var e=p(n.filename),t=function(e){if(!e)return!1;var n=document.querySelectorAll("link"),t=!1;return o.call(n,(function(n){if(n.href){var s=function(e,n){var t;return e=r(e,{stripWWW:!1}),n.some((function(r){e.indexOf(n)>-1&&(t=r)})),t}(n.href,e);l(s)&&!0!==n.visited&&s&&(d(n,s),t=!0)}})),t}(e);if(n.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();t?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},u=50,h=0,function(){var e=this,n=arguments;clearTimeout(h),h=setTimeout((function(){return t.apply(e,n)}),u)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var n=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",t=e.replace(new RegExp(n,"i"),"").split("/"),r=t[0].toLowerCase().replace(/\.$/,"");return t[0]="",n+r+t.reduce((function(e,n){switch(n){case"..":e.pop();break;case".":break;default:e.push(n)}return e}),[]).join("/")}},920:(e,n,t)=>{var r=t(783)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)},915:(e,n,t)=>{var r=t(783)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)}},d={};function c(e){var n=d[e];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var t=d[e]={id:e,exports:{}};try{var r={id:e,module:t,factory:a[e],require:c};c.i.forEach((function(e){e(r)})),t=r.module,r.factory.call(t.exports,t,t.exports,r.require)}catch(e){throw t.error=e,e}return t.exports}c.m=a,c.c=d,c.i=[],c.hu=e=>e+"."+c.h()+".hot-update.js",c.miniCssF=e=>"main.css",c.hmrF=()=>"main."+c.h()+".hot-update.json",c.h=()=>"2f91c4fb362c7970c115",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),e={},n="ahjs_wss_frontend:",c.l=(t,r,s,i)=>{if(e[t])e[t].push(r);else{var o,a;if(void 0!==s)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==t||u.getAttribute("data-webpack")==n+s){o=u;break}}o||(a=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,c.nc&&o.setAttribute("nonce",c.nc),o.setAttribute("data-webpack",n+s),o.src=t),e[t]=[r];var h=(n,r)=>{o.onerror=o.onload=null,clearTimeout(p);var s=e[t];if(delete e[t],o.parentNode&&o.parentNode.removeChild(o),s&&s.forEach((e=>e(r))),n)return n(r)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=h.bind(null,o.onerror),o.onload=h.bind(null,o.onload),a&&document.head.appendChild(o)}},(()=>{var e,n,t,r={},s=c.c,i=[],o=[],a="idle",d=0,l=[];function u(e){a=e;for(var n=[],t=0;t<o.length;t++)n[t]=o[t].call(null,e);return Promise.all(n)}function h(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var n=0;n<e.length;n++)e[n]()}}))}function p(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return u("check").then(c.hmrM).then((function(t){return t?u("prepare").then((function(){var r=[];return n=[],Promise.all(Object.keys(c.hmrC).reduce((function(e,s){return c.hmrC[s](t.c,t.r,t.m,e,n,r),e}),[])).then((function(){return n=function(){return e?m(e):u("ready").then((function(){return r}))},0===d?n():new Promise((function(e){l.push((function(){e(n())}))}));var n}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},v();var r=n.map((function(n){return n(e)}));n=void 0;var s=r.map((function(e){return e.error})).filter(Boolean);if(s.length>0)return u("abort").then((function(){throw s[0]}));var i=u("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var o,a=u("apply"),d=function(e){o||(o=e)},c=[];return r.forEach((function(e){if(e.apply){var n=e.apply(d);if(n)for(var t=0;t<n.length;t++)c.push(n[t])}})),Promise.all([i,a]).then((function(){return o?u("fail").then((function(){throw o})):t?m(e).then((function(e){return c.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e})):u("idle").then((function(){return c}))}))}function v(){if(t)return n||(n=[]),Object.keys(c.hmrI).forEach((function(e){t.forEach((function(t){c.hmrI[e](t,n)}))})),t=void 0,!0}c.hmrD=r,c.i.push((function(l){var m,v,g,y,w=l.module,E=function(n,t){var r=s[t];if(!r)return n;var o=function(o){if(r.hot.active){if(s[o]){var a=s[o].parents;-1===a.indexOf(t)&&a.push(t)}else i=[t],e=o;-1===r.children.indexOf(o)&&r.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+t),i=[];return n(o)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t}}};for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&"e"!==l&&Object.defineProperty(o,l,c(l));return o.e=function(e){return function(e){switch(a){case"ready":u("prepare");case"prepare":return d++,e.then(h,h),e;default:return e}}(n.e(e))},o}(l.require,l.id);w.hot=(m=l.id,v=w,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==m,_requireSelf:function(){i=v.parents.slice(),e=g?void 0:m,c(m)},active:!0,accept:function(e,n,t){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._acceptedDependencies[e[r]]=n||function(){},y._acceptedErrorHandlers[e[r]]=t;else y._acceptedDependencies[e]=n||function(){},y._acceptedErrorHandlers[e]=t},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._declinedDependencies[e[n]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=y._disposeHandlers.indexOf(e);n>=0&&y._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":n=[],Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](m,n)})),u("ready");break;case"ready":Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](m,n)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return a;o.push(e)},addStatusHandler:function(e){o.push(e)},removeStatusHandler:function(e){var n=o.indexOf(e);n>=0&&o.splice(n,1)},data:r[m]},e=void 0,y),w.parents=i,w.children=[],i=[],l.require=E})),c.hmrC={},c.hmrI={}})(),(()=>{var e;c.g.importScripts&&(e=c.g.location+"");var n=c.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=e})(),t=(e,n,t,r)=>{var s=document.createElement("link");return s.rel="stylesheet",s.type="text/css",s.onerror=s.onload=i=>{if(s.onerror=s.onload=null,"load"===i.type)t();else{var o=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||n,d=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=o,d.request=a,s.parentNode.removeChild(s),r(d)}},s.href=n,document.head.appendChild(s),s},r=(e,n)=>{for(var t=document.getElementsByTagName("link"),r=0;r<t.length;r++){var s=(o=t[r]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(s===e||s===n))return o}var i=document.getElementsByTagName("style");for(r=0;r<i.length;r++){var o;if((s=(o=i[r]).getAttribute("data-href"))===e||s===n)return o}},s=[],i=[],o=e=>({dispose:()=>{for(var e=0;e<s.length;e++){var n=s[e];n.parentNode&&n.parentNode.removeChild(n)}s.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),c.hmrC.miniCss=(e,n,a,d,l,u)=>{l.push(o),e.forEach((e=>{var n=c.miniCssF(e),o=c.p+n,a=r(n,o);a&&d.push(new Promise(((n,r)=>{var d=t(e,o,(()=>{d.as="style",d.rel="preload",n()}),r);s.push(a),i.push(d)})))}))},(()=>{var e,n,t,r,s,i=c.hmrS_jsonp=c.hmrS_jsonp||{179:0},o={};function a(n,t){return e=t,new Promise(((e,t)=>{o[n]=e;var r=c.p+c.hu(n),s=new Error;c.l(r,(e=>{if(o[n]){o[n]=void 0;var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;s.message="Loading hot update chunk "+n+" failed.\n("+r+": "+i+")",s.name="ChunkLoadError",s.type=r,s.request=i,t(s)}}))}))}function d(e){function o(e){for(var n=[e],t={},r=n.map((function(e){return{chain:[e],id:e}}));r.length>0;){var s=r.pop(),i=s.id,o=s.chain,d=c.c[i];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:o,moduleId:i};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],h=c.c[u];if(h){if(h.hot._declinedDependencies[i])return{type:"declined",chain:o.concat([u]),moduleId:i,parentId:u};-1===n.indexOf(u)&&(h.hot._acceptedDependencies[i]?(t[u]||(t[u]=[]),a(t[u],[i])):(delete t[u],n.push(u),r.push({chain:o.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function a(e,n){for(var t=0;t<n.length;t++){var r=n[t];-1===e.indexOf(r)&&e.push(r)}}c.f&&delete c.f.jsonpHmr,n=void 0;var d={},l=[],u={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(c.o(t,p)){var f,m=t[p],v=!1,g=!1,y=!1,w="";switch((f=m?o(p):{type:"disposed",moduleId:p}).chain&&(w="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+f.moduleId+w));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+w));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+w));break;case"accepted":e.onAccepted&&e.onAccepted(f),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(v)return{error:v};if(g)for(p in u[p]=m,a(l,f.outdatedModules),f.outdatedDependencies)c.o(f.outdatedDependencies,p)&&(d[p]||(d[p]=[]),a(d[p],f.outdatedDependencies[p]));y&&(a(l,[f.moduleId]),u[p]=h)}t=void 0;for(var E,b=[],_=0;_<l.length;_++){var C=l[_],S=c.c[C];S&&(S.hot._selfAccepted||S.hot._main)&&u[C]!==h&&!S.hot._selfInvalidated&&b.push({module:C,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete i[e]})),r=void 0;for(var n,t=l.slice();t.length>0;){var s=t.pop(),o=c.c[s];if(o){var a={},u=o.hot._disposeHandlers;for(_=0;_<u.length;_++)u[_].call(null,a);for(c.hmrD[s]=a,o.hot.active=!1,delete c.c[s],delete d[s],_=0;_<o.children.length;_++){var h=c.c[o.children[_]];h&&(e=h.parents.indexOf(s))>=0&&h.parents.splice(e,1)}}}for(var p in d)if(c.o(d,p)&&(o=c.c[p]))for(E=d[p],_=0;_<E.length;_++)n=E[_],(e=o.children.indexOf(n))>=0&&o.children.splice(e,1)},apply:function(n){for(var t in u)c.o(u,t)&&(c.m[t]=u[t]);for(var r=0;r<s.length;r++)s[r](c);for(var i in d)if(c.o(d,i)){var o=c.c[i];if(o){E=d[i];for(var a=[],h=[],p=[],f=0;f<E.length;f++){var m=E[f],v=o.hot._acceptedDependencies[m],g=o.hot._acceptedErrorHandlers[m];if(v){if(-1!==a.indexOf(v))continue;a.push(v),h.push(g),p.push(m)}}for(var y=0;y<a.length;y++)try{a[y].call(null,E)}catch(t){if("function"==typeof h[y])try{h[y](t,{moduleId:i,dependencyId:p[y]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[y],error:r,originalError:t}),e.ignoreErrored||(n(r),n(t))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[y],error:t}),e.ignoreErrored||n(t)}}}for(var w=0;w<b.length;w++){var _=b[w],C=_.module;try{_.require(C)}catch(t){if("function"==typeof _.errorHandler)try{_.errorHandler(t,{moduleId:C,module:c.c[C]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:C,error:r,originalError:t}),e.ignoreErrored||(n(r),n(t))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:C,error:t}),e.ignoreErrored||n(t)}}return l}}}self.webpackHotUpdateahjs_wss_frontend=(n,r,i)=>{for(var a in r)c.o(r,a)&&(t[a]=r[a],e&&e.push(a));i&&s.push(i),o[n]&&(o[n](),o[n]=void 0)},c.hmrI.jsonp=function(e,n){t||(t={},s=[],r=[],n.push(d)),c.o(t,e)||(t[e]=c.m[e])},c.hmrC.jsonp=function(e,o,l,u,h,p){h.push(d),n={},r=o,t=l.reduce((function(e,n){return e[n]=!1,e}),{}),s=[],e.forEach((function(e){c.o(i,e)&&void 0!==i[e]?(u.push(a(e,p)),n[e]=!0):n[e]=!1})),c.f&&(c.f.jsonpHmr=function(e,t){n&&c.o(n,e)&&!n[e]&&(t.push(a(e)),n[e]=!0)})},c.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(c.p+c.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),c(621)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,